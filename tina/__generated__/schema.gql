# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  account(relativePath: String): Account!
  accountConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AccountFilter): AccountConnection!
  coway_connect_application(relativePath: String): Coway_connect_application!
  coway_connect_applicationConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Coway_connect_applicationFilter): Coway_connect_applicationConnection!
  coway_mall(relativePath: String): Coway_mall!
  coway_mallConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Coway_mallFilter): Coway_mallConnection!
  payment(relativePath: String): Payment!
  paymentConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PaymentFilter): PaymentConnection!
  privacy(relativePath: String): Privacy!
  privacyConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PrivacyFilter): PrivacyConnection!
  product(relativePath: String): Product!
  productConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProductFilter): ProductConnection!
  return(relativePath: String): Return!
  returnConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ReturnFilter): ReturnConnection!
  service(relativePath: String): Service!
  serviceConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ServiceFilter): ServiceConnection!
  shipping(relativePath: String): Shipping!
  shippingConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ShippingFilter): ShippingConnection!
}

input DocumentFilter {
  account: AccountFilter
  coway_connect_application: Coway_connect_applicationFilter
  coway_mall: Coway_mallFilter
  payment: PaymentFilter
  privacy: PrivacyFilter
  product: ProductFilter
  return: ReturnFilter
  service: ServiceFilter
  shipping: ShippingFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Account | Coway_connect_application | Coway_mall | Payment | Privacy | Product | Return | Service | Shipping | Folder

type Account implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input AccountFilter {
  title: StringFilter
  body: RichTextFilter
}

type AccountConnectionEdges {
  cursor: String!
  node: Account
}

type AccountConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AccountConnectionEdges]
}

type Coway_connect_application implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Coway_connect_applicationFilter {
  title: StringFilter
  body: RichTextFilter
}

type Coway_connect_applicationConnectionEdges {
  cursor: String!
  node: Coway_connect_application
}

type Coway_connect_applicationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Coway_connect_applicationConnectionEdges]
}

type Coway_mall implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Coway_mallFilter {
  title: StringFilter
  body: RichTextFilter
}

type Coway_mallConnectionEdges {
  cursor: String!
  node: Coway_mall
}

type Coway_mallConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Coway_mallConnectionEdges]
}

type Payment implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PaymentFilter {
  title: StringFilter
  body: RichTextFilter
}

type PaymentConnectionEdges {
  cursor: String!
  node: Payment
}

type PaymentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PaymentConnectionEdges]
}

type Privacy implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PrivacyFilter {
  title: StringFilter
  body: RichTextFilter
}

type PrivacyConnectionEdges {
  cursor: String!
  node: Privacy
}

type PrivacyConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PrivacyConnectionEdges]
}

type Product implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ProductFilter {
  title: StringFilter
  body: RichTextFilter
}

type ProductConnectionEdges {
  cursor: String!
  node: Product
}

type ProductConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProductConnectionEdges]
}

type Return implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ReturnFilter {
  title: StringFilter
  body: RichTextFilter
}

type ReturnConnectionEdges {
  cursor: String!
  node: Return
}

type ReturnConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ReturnConnectionEdges]
}

type Service implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ServiceFilter {
  title: StringFilter
  body: RichTextFilter
}

type ServiceConnectionEdges {
  cursor: String!
  node: Service
}

type ServiceConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ServiceConnectionEdges]
}

type Shipping implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ShippingFilter {
  title: StringFilter
  body: RichTextFilter
}

type ShippingConnectionEdges {
  cursor: String!
  node: Shipping
}

type ShippingConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ShippingConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateAccount(relativePath: String!, params: AccountMutation!): Account!
  createAccount(relativePath: String!, params: AccountMutation!): Account!
  updateCoway_connect_application(relativePath: String!, params: Coway_connect_applicationMutation!): Coway_connect_application!
  createCoway_connect_application(relativePath: String!, params: Coway_connect_applicationMutation!): Coway_connect_application!
  updateCoway_mall(relativePath: String!, params: Coway_mallMutation!): Coway_mall!
  createCoway_mall(relativePath: String!, params: Coway_mallMutation!): Coway_mall!
  updatePayment(relativePath: String!, params: PaymentMutation!): Payment!
  createPayment(relativePath: String!, params: PaymentMutation!): Payment!
  updatePrivacy(relativePath: String!, params: PrivacyMutation!): Privacy!
  createPrivacy(relativePath: String!, params: PrivacyMutation!): Privacy!
  updateProduct(relativePath: String!, params: ProductMutation!): Product!
  createProduct(relativePath: String!, params: ProductMutation!): Product!
  updateReturn(relativePath: String!, params: ReturnMutation!): Return!
  createReturn(relativePath: String!, params: ReturnMutation!): Return!
  updateService(relativePath: String!, params: ServiceMutation!): Service!
  createService(relativePath: String!, params: ServiceMutation!): Service!
  updateShipping(relativePath: String!, params: ShippingMutation!): Shipping!
  createShipping(relativePath: String!, params: ShippingMutation!): Shipping!
}

input DocumentUpdateMutation {
  account: AccountMutation
  coway_connect_application: Coway_connect_applicationMutation
  coway_mall: Coway_mallMutation
  payment: PaymentMutation
  privacy: PrivacyMutation
  product: ProductMutation
  return: ReturnMutation
  service: ServiceMutation
  shipping: ShippingMutation
  relativePath: String
}

input DocumentMutation {
  account: AccountMutation
  coway_connect_application: Coway_connect_applicationMutation
  coway_mall: Coway_mallMutation
  payment: PaymentMutation
  privacy: PrivacyMutation
  product: ProductMutation
  return: ReturnMutation
  service: ServiceMutation
  shipping: ShippingMutation
}

input AccountMutation {
  title: String
  body: JSON
}

input Coway_connect_applicationMutation {
  title: String
  body: JSON
}

input Coway_mallMutation {
  title: String
  body: JSON
}

input PaymentMutation {
  title: String
  body: JSON
}

input PrivacyMutation {
  title: String
  body: JSON
}

input ProductMutation {
  title: String
  body: JSON
}

input ReturnMutation {
  title: String
  body: JSON
}

input ServiceMutation {
  title: String
  body: JSON
}

input ShippingMutation {
  title: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
